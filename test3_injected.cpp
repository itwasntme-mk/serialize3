//Auto-generated by serialize3.exe
//Defines member functions injected into serializable objects
#include <cassert>
#define SERIALIZER_INHERITANCE_SWITCH(inhType) public
#include "test3.hpp"
#include <serialize3/h/gen_code/dumpertemplates.h>
#include <serialize3/h/gen_code/loadertemplates.h>
#include "test3_typeids.hpp"
#ifndef REGISTER_OBJECT
  #define REGISTER_OBJECT(_class_,_ptr_)
#endif
#ifndef WRAP
  #define WRAP(...) __VA_ARGS__
#endif

void* TClass1::BuildForSerializer()
  {
  TClass1* ptr = new TClass1;
  REGISTER_OBJECT((WRAP(TClass1)), ptr);
  return ptr;
  }
void* TClass2::BuildForSerializer()
  {
  TClass2* ptr = new TClass2;
  REGISTER_OBJECT((WRAP(TClass2)), ptr);
  return ptr;
  }
void TUnion1::Dump(ASerializeDumper& dumper) const
  {
  DPUSH_INDENT;
  DLOGMSG("Dump TUnion1");
  dumper & m5;
  }
void TUnion1::Load(ASerializeLoader& loader)
  {
  LPUSH_INDENT;
  LLOGMSG("Load TUnion1");
  loader & m5;
  }
void TUnion2::Dump(ASerializeDumper& dumper) const
  {
  DPUSH_INDENT;
  DLOGMSG("Dump TUnion2");
  dumper & m2;
  }
void TUnion2::Load(ASerializeLoader& loader)
  {
  LPUSH_INDENT;
  LLOGMSG("Load TUnion2");
  loader & m2;
  }
void TClass1::Dump(ASerializeDumper& dumper) const
  {
  DPUSH_INDENT;
  DLOGMSG("Dump TClass1");
  dumper & m1;
  dumper & m2;
  DPOP_INDENT;
  }
void TClass1::Load(ASerializeLoader& loader)
  {
  LPUSH_INDENT;
  LLOGMSG("Load TClass1");
  loader & m1;
  loader & m2;
  LPOP_INDENT;
  }
TTypeId TClass1::GetTypeId() const { return -1; }
void TClass1::DumpPointer(ASerializeDumper& dumper) const
  {
  DLOGMSG("Dump TClass1 pointer");
  dumper.Dump(GetTypeId());
  dumper & *this;
  }
void* TClass1::LoadPointer(ASerializeLoader& loader)
  {
  LLOGMSG("Load TClass1 pointer");
  TTypeId objectTypeId;
  loader.Load(objectTypeId);
  TClass1* o;
  switch(objectTypeId)
    {
    case NULL_TYPE_ID:
      o = 0;
      break;
    case -1:
      o = (TClass1*)TClass1::BuildForSerializer();
      loader & (TClass1&)*o;
      break;
    default:
      assert(false);
      o = 0;
      throw 1;
    } //end switch
  return o;
  } //end LoadPointer
void TClass2::Dump(ASerializeDumper& dumper) const
  {
  DPUSH_INDENT;
  DLOGMSG("Dump TClass2");
  dumper & m;
  dumper & m1;
  dumper & m1;
  dumper & m4;
  dumper & m5;
  dumper & m6;
  dumper & m7;
  for (int i = 0; i < 3; ++i)
    for (int ii = 0; ii < 2; ++ii)
      {
      dumper & m8[i][ii].m4;
      dumper & m8[i][ii].m5;
      dumper & m8[i][ii].m6.m6;
      dumper & m8[i][ii].m6.m7;
      }
  DPOP_INDENT;
  }
void TClass2::Load(ASerializeLoader& loader)
  {
  LPUSH_INDENT;
  LLOGMSG("Load TClass2");
  loader & m;
  loader & m1;
  loader & m1;
  loader & m4;
  loader & m5;
  loader & m6;
  loader & m7;
  for (int i = 0; i < 3; ++i)
    for (int ii = 0; ii < 2; ++ii)
      {
      loader & m8[i][ii].m4;
      loader & m8[i][ii].m5;
      loader & m8[i][ii].m6.m6;
      loader & m8[i][ii].m6.m7;
      }
  LPOP_INDENT;
  }
TTypeId TClass2::GetTypeId() const { return -1; }
void TClass2::DumpPointer(ASerializeDumper& dumper) const
  {
  DLOGMSG("Dump TClass2 pointer");
  dumper.Dump(GetTypeId());
  dumper & *this;
  }
void* TClass2::LoadPointer(ASerializeLoader& loader)
  {
  LLOGMSG("Load TClass2 pointer");
  TTypeId objectTypeId;
  loader.Load(objectTypeId);
  TClass2* o;
  switch(objectTypeId)
    {
    case NULL_TYPE_ID:
      o = 0;
      break;
    case -1:
      o = (TClass2*)TClass2::BuildForSerializer();
      loader & (TClass2&)*o;
      break;
    default:
      assert(false);
      o = 0;
      throw 1;
    } //end switch
  return o;
  } //end LoadPointer
