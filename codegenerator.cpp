#include "codegenerator.h"

#include <cassert>
#include <iostream>

bool TCodeGenerator::Open(const char* fileName, const char* fileDescription)
  {
  OutputFileName = fileName;
  Out.open(fileName, std::ios::out | std::ios::trunc );

  if (Out.is_open() == false)
    {
    LOG_ERROR("Could not open " << fileName << " to write");
    return false;
    }

  AddComment("Auto-generated by serialize3.exe");

  if (fileDescription)
    AddComment(fileDescription);

  return true;
  }
  
void TCodeGenerator::Close()
  {
  Out.close();
  }

void TCodeGenerator::AddDefine(const char* macro, const char* value)
  {
  Out << "#define " << macro << " " << value << std::endl;
  }

void TCodeGenerator::WriteClassDeclaration(const char* className)
  {
  Out << "class " << className << ";" << std::endl;
  }

void TCodeGenerator::AddSystemInclude(const char* includePath)
  {
  Out << "#include <" << includePath << ">" << std::endl;
  }

void TCodeGenerator::AddInclude(const char* includeFileName)
  {
  Out << "#include \"" << includeFileName << "\"" << std::endl;
  }

void TCodeGenerator::AddComment(const char* comment)
  {
  Out << "//" << comment << std::endl;
  }

void TCodeGenerator::AddLogCall(const char* logMsg, const char* logger)
  {
  if (AddLogging)
    {
    Out << Indent;
    if (logger)
      Out << logger << ".";
    Out << "Log(\"" << logMsg << "\");" << std::endl;
    }
  }

void TCodeGenerator::AddLogMacro(const char* logMsg, const char* macroName)
  {
  if (AddLogging)
    {
    Out << Indent << macroName;
    Out << "(\"" << logMsg << "\");" << std::endl;
    }
  }

void TCodeGenerator::StartHeaderSentinel()
  {
  Out << "#pragma once" << std::endl << std::endl;
  }

void TCodeGenerator::EndHeaderSentinel() {}

void TCodeGenerator::DoInlineInclude(const char* fileName)
  {
  std::ifstream infile(fileName);

  if (!infile.good())
    {
    std::cerr << "Error: could not open " << fileName << " in DoInlineInclude." << std::endl;
    return;
    }

  char line[1024];

  while (!infile.eof())
    {
    infile.getline(line,1024);
    Out << line << std::endl;
    }
  }
